services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:latest  # Pull the official Nginx image
    container_name: nginx
    ports:
      - "80:80"  # Map port 80 on the host to port 80 in the container
      - "443:443"  # If you want to handle HTTPS as well
    volumes:
      - ./containers/nginx/config/nginx.conf:/etc/nginx/nginx.conf  # Your Nginx config file
      - ./containers/nginx/config/conf.d:/etc/nginx/conf.d          # Your Nginx config files
      - ./containers/nginx/logs:/var/log/nginx                      # Mount logs directory (optional)
    depends_on:
      - laravel
    networks:
      app-network:
        aliases:
          - oktopost.com
          - www.oktopost.com

  # Laravel Oktopost Back Container
  laravel:
    privileged: true
    build:
      context: ./containers/laravel
      dockerfile: Dockerfile
      args:
        PROJECT_NAME: OktopostTask   # Set the project name here
    container_name: laravel
    restart: unless-stopped
    working_dir: /var/projects/OktopostTask
    volumes:
      - ./OktopostTask:/var/projects/OktopostTask
    environment:
      - SET_CONTAINER_TIMEZONE=true
      - CONTAINER_TIMEZONE=UTC
      - SESSION_DRIVER=redis
      - CACHE_DRIVER=redis
    cap_add:
      - SYS_ADMIN
      - NET_BIND_SERVICE  # Разрешает использование порта 80 для непривилегированных пользователей
    networks:
      app-network:
        aliases:
          - oktopost.com
    depends_on:
      - mysql
      - redis
    tty: true
    command: php artisan octane:start --server=swoole --host=oktopost-service.com --port=80

  # MySQL Container
  mysql:
    image: mysql:5.7
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: laravel
      MYSQL_USER: laraveluser
      MYSQL_PASSWORD: password
    volumes:
      - ./mysql_data:/var/lib/mysql
    networks:
      - app-network

  # Redis Container
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    networks:
      - app-network

# Define a shared network
networks:
  app-network:
    driver: bridge

# Volume for MySQL data persistence
volumes:
  mysql_data:
    driver: local
